When would you want to use a remote repository rather than keeping all your work 
local?

	If you are collaborating on projects with others or sharing code, you can use a
	remote repository. If you are working on another computer, you can use a remote
	repository to push changes to it.
  
Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?
	
	If keeping repositories in sync automatically, the code will change without my
	being aware of it. When you try new features, since new features require multiple 
	commits and are more likely to have bugs, in this case, there is no need to have
	Git automatically stay up-to-date. 

Describe the differences between forks, clones, and branches. When would you use one
instead of another?

	Forking is making a copy of an existing GitHub repository directly within the
	context of GitHub. GitHub keeps track of the number of people who have made
	forks. Cloning is a copy of a repository and it works on any two repositories.
	You can clone the someone else's repository on GitHub to your local computer. You
	can also clone the repository within a local. Branches are labels for commits,
	which happens on a single repository.

	When you want to take an original code and work on the code separately, you can
	use a fork. You can use clone when you copy entire repository to your local
	machine. When you want to preserve the master branch and try experimental
	feature, you can use branches.

What is the benefit of having a copy of the last known state of the remote stored
locally?

	When local repository and remote repository are out-of-sync, you can update only
	the local copy of the remote branch without affecting the actual local version.
	Then, you can have an access to any updates, while you are offline. You can also
	merge the local copy of the remote branch into the local one.

How would you collaborate without using Git or GitHub? What would be easier, and what
would be harder?

	Without using Git or GitHub, I would use email or Dropbox. I can email files back
	and forth, but it is difficult to grasp real-time changes. If I use Dropbox, I
	can collaborate with others using shared folders in Dropbox, which allows me to
	see changes almost immediately.

	When collaborations cause conflict, using Git or GitHub would be easier to deal
	with the conflicts. I can create a merged version of changes and make a pull
	request to get feedback on the changes.

When would you want to make changes in a separate branch rather than directly in
master? What benefits does each approach have?

	I can make changes in a separate branch when I collaborate with others. It allows
	me to show them my work and get feedback on my changes before I update the master
	branch. If I work alone on a project, I want to work directly on my master branch
	unless I try a new feature.