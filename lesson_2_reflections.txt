What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository, Git creates a .git directory in the current 
	working directory. Initializing a repository makes it possible to keep track 
	of files you want to commit in the directory.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is the intermediate area where you put the files before you 
	commit to the repository. It helps you specify what changes should be committed. 
	If you commit the files from working directory to repository without going 
	through the staging area, it is difficult to make one commit per logical change.

How can you use the staging area to make sure you have one commit per logical
change?
	
	You can select only the files in the working directory that are related to the 
	first logical change and add them to the staging area, then commit them. Files 
	that are not related to the first logical change are not affected, and the entire 
	contents of the staging area are added to the repository as a single commit.	

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	If you want to try experimental features while keeping existing ones working 
	well, it is a good idea to create a new branch, leaving your existing working 
	version as your master branch. It is because you are not sure if the experimental 
	features work well. When you create another version, such as creating a version 
	for a different language, you also can create a new branch. 

How do the diagrams help you visualize the branch structure?

	Since the diagrams show the overall branch structure and each commit's parent, 
	you can see which commits are reachable from each branch. You can see from which 
	commit each branch was created and at which commit it was merged.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Two branches merged into a new commit. This merge commit has two parents and 
	contains all the changes from two branches. Representing it in the diagram shows 
	what the parents of the merge commit are.	

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	The Git's automatic merging is convenient and efficient. If you doing merges 
	manually with all the changes from each branch, it is time-consuming. However, it 
	is very difficult to make automatic merging perfect, which can lead to errors 
	after merging branches together. 